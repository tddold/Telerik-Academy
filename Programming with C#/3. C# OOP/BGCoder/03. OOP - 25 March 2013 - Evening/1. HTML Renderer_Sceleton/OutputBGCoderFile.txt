using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.CodeDom.Compiler;
using Microsoft.CSharp;
using System.Reflection;

public class HTMLElementFactory: IElementFactory
    {
        public IElement CreateElement(string name)
        {
            return new HtmlElements(name);
        }

        public IElement CreateElement(string name, string content)
        {
            return new HtmlElements(name, content);
        }

        public ITable CreateTable(int rows, int cols)
        {
            return new HtmlTable(rows, cols);
        }
    }


    public class HtmlElements : IElement
    {
        private ICollection<IElement> childElements;

        public HtmlElements(string name)
        {
            this.Name = name;
            this.childElements = new List<IElement>();
        }

        public HtmlElements(string name, string textContent)
            : this(name)
        {
            this.TextContent = textContent;
        }

        public virtual string Name { get; private set; }

        public virtual string TextContent { get; set; }

        public virtual IEnumerable<IElement> ChildElements
        {
            get { return this.childElements; }
        }

        public virtual void AddElement(IElement element)
        {
            this.childElements.Add(element);
        }

        public virtual void Render(StringBuilder output)
        {
            if (!string.IsNullOrWhiteSpace(this.Name))
            {
                output.AppendFormat("<{0}>", this.Name);
            }

            if (!string.IsNullOrWhiteSpace(this.TextContent))
            {
                for (int i = 0; i < this.TextContent.Length; i++)
                {
                    char symbol = this.TextContent[i];

                    switch (symbol)
                    {
                        case '<':
                            output.Append("&lt");
                            break;
                        case '>':
                            output.Append("&gt");
                            break;
                        case '&':
                            output.Append("&amp");
                            break;
                        default:
                            output.Append(symbol);
                            break;
                    }
                }

            }

            foreach (var childElement in this.childElements)
            {
                output.Append(childElement);
            }

            if (!string.IsNullOrWhiteSpace(this.Name))
            {
                output.AppendFormat("</{0}>", this.Name);
            }
        }

        public override string ToString()
        {
            var otput = new StringBuilder();

            this.Render(otput);

            return otput.ToString();
        }
    }


	public class HTMLRendererCommandExecutor
	{
		static void Main()
		{
			string csharpCode = ReadInputCSharpCode();
			CompileAndRun(csharpCode);
		}

		private static string ReadInputCSharpCode()
		{
			StringBuilder result = new StringBuilder();
			string line;
			while ((line = Console.ReadLine()) != "")
			{
				result.AppendLine(line);
			}
			return result.ToString();
		}

		static void CompileAndRun(string csharpCode)
		{
			// Prepare a C# program for compilation
			string[] csharpClass =
			{
				@"using System;
				  using HTMLRenderer;

				  public class RuntimeCompiledClass
				  {
					 public static void Main()
					 {"
						+ csharpCode + @"
					 }
				  }"
			};

			// Compile the C# program
			CompilerParameters compilerParams = new CompilerParameters();
			compilerParams.GenerateInMemory = true;
			compilerParams.TempFiles = new TempFileCollection(".");
			compilerParams.ReferencedAssemblies.Add("System.dll");
			compilerParams.ReferencedAssemblies.Add(Assembly.GetExecutingAssembly().Location);
			CSharpCodeProvider csharpProvider = new CSharpCodeProvider();
			CompilerResults compile = csharpProvider.CompileAssemblyFromSource(
				compilerParams, csharpClass);

			// Check for compilation errors
			if (compile.Errors.HasErrors)
			{
				string errorMsg = "Compilation error: ";
				foreach (CompilerError ce in compile.Errors)
				{
					errorMsg += "\r\n" + ce.ToString();
				}
				throw new Exception(errorMsg);
			}

			// Invoke the Main() method of the compiled class
			Assembly assembly = compile.CompiledAssembly;
			Module module = assembly.GetModules()[0];
			Type type = module.GetType("RuntimeCompiledClass");
			MethodInfo methInfo = type.GetMethod("Main");
			methInfo.Invoke(null, null);
		}
	}


    public class HtmlTable : HtmlElements, ITable
    {
        private const string TableName = "table";
        private const string TableRowOpenTag = "<tr>";
        private const string TableRowColseTag = "</tr>";
        private const string TableCellOpenTag = "<td>";
        private const string TableCellCloseTag = "</td>";


        private int rows;
        private int cols;
        private IElement[,] cells;

        public HtmlTable(int rows, int cols)
            : base(TableName)
        {
            this.Rows = rows;
            this.Cols = cols;
            this.cells = new IElement[this.Rows, this.Cols];
        }

        public int Rows
        {
            get { return this.rows; }

            private set
            {
                if (value <= 0)
                {
                    throw new ArgumentOutOfRangeException("value", "HTML table rows count must be positive!");
                }

                this.rows = value;
            }
        }

        public int Cols
        {
            get { return this.cols; }

            private set
            {
                if (value <= 0)
                {
                    throw new ArgumentOutOfRangeException("value", "HTML table cols count must be positive!");
                }

                this.cols = value;
            }
        }

        public virtual IElement this[int row, int col]
        {
            get
            {
                this.ValidateIndecies(row, col);
                return this.cells[row, col];
            }
            set
            {
                this.ValidateIndecies(row, col);

                if (value == null)
                {
                    throw new ArgumentNullException("value", "HTML element in table cell cannot be null!");
                }

                this.cells[row, col] = value;
            }
        }

        // public override string Name { get; private set; }

        public override string TextContent
        {
            get
            {
                throw new InvalidOperationException("HTML table do not have text content in get!");
            }

            set
            {
                throw new InvalidOperationException("HTML table do not have text content in set!");
            }
        }

        public override IEnumerable<IElement> ChildElements
        {
            get { throw new InvalidOperationException("HTML table do not have child elements!"); }
        }

        public override void AddElement(IElement element)
        {
            throw new InvalidOperationException("HTML table do not have child elements!");
        }

        public override void Render(StringBuilder output)
        {
            output.AppendFormat("<{0}>", TableName);

            for (int row = 0; row < this.Rows; row++)
            {
                output.Append(TableRowOpenTag);

                for (int col = 0; col < this.Cols; col++)
                {
                    output.Append(TableCellOpenTag);

                    output.Append(this.cells[row, col].ToString());

                    output.Append(TableCellCloseTag);
                }

                output.Append(TableRowColseTag);
            }


            output.AppendFormat("</{0}>", TableName);

        }

        public override string ToString()
        {
            var output = new StringBuilder();

            return base.ToString();
        }

        private void ValidateIndecies(int row, int col)
        {
            if (row < 0 || row >= this.Rows)
            {
                throw new IndexOutOfRangeException("Provided row is out of the boundaries of the HTML table!");
            }

            if (col < 0 || col >= this.Cols)
            {
                throw new IndexOutOfRangeException("Provided col is out of the boundaries of the HTML table!");
            }
        }
    }


    public interface IElement
    {
        string Name { get; }
        string TextContent { get; set; }
        IEnumerable<IElement> ChildElements { get; }
        void AddElement(IElement element);
        void Render(StringBuilder output);
        string ToString();
    }


    public interface IElementFactory
    {
        IElement CreateElement(string name);
        IElement CreateElement(string name, string content);
        ITable CreateTable(int rows, int cols);
    }


    public interface ITable: IElement
    {
        int Rows { get; }
        int Cols { get; }
        IElement this[int row, int col] { get; set; }
    }